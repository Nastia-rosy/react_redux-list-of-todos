{"version":3,"sources":["store/index.ts","api/api.ts","components/User.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["setSortType","sortType","type","isLoading","state","loading","getTodos","todos","getSortType","initialState","store","createStore","action","filter","todo","id","value","API_URL","getTodosFromServer","a","Promise","all","fetch","then","response","json","todosFromServer","usersFromServer","map","user","find","userId","User","className","name","TodoList","todoList","dispatch","useDispatch","completed","title","onClick","App","useSelector","visibleTodos","useMemo","sort","b","localeCompare","getVisibleTodos","length","finishLoading","Root","ReactDOM","render","document","getElementById"],"mappings":"+QAYaA,EAAc,SAACC,GAAD,MAAuB,CAACC,KAN7B,gBAMkDD,aAK3DE,EAAY,SAACC,GAAD,OAAsBA,EAAMC,SACxCC,EAAW,SAACF,GAAD,OAAsBA,EAAMG,OACvCC,EAAc,SAACJ,GAAD,OAAsBA,EAAMH,UASjDQ,EAA0B,CAC9BJ,SAAS,EACTE,MAAO,GACPN,SAAS,IA2CIS,EALDC,aAlCM,WAA8C,IAA7CP,EAA4C,uDAApCK,EAAcG,EAAsB,uCAC/D,OAAQA,EAAOV,MACb,IAjCkB,gBAkChB,OAAO,2BACFE,GADL,IAEEC,SAAS,IAEb,IArCmB,iBAsCjB,OAAO,2BACFD,GADL,IAEEC,SAAS,EACTE,MAAOK,EAAOL,QAGlB,IA3CkB,gBA4ChB,OAAO,2BACFH,GADL,IAEEH,SAAUW,EAAOX,WAGrB,IAhDgB,cAiDd,OAAO,2BACFG,GADL,IAEEG,MAAOH,EAAMG,MAAMM,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOH,EAAOI,WAGzD,QACA,OAAO,eACFZ,MAQPK,G,yCCvEIQ,EAAU,kEAyBHC,EAAkB,uCAAG,kCAAAC,EAAA,sEACiBC,QAAQC,IAAI,CAVtDC,MAAM,GAAD,OAAIL,EAAJ,gBACTM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAItBH,MAAM,GAAD,OAAIL,EAAJ,gBACTM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YAGG,0CACzBC,EADyB,KACRC,EADQ,uBAGzBD,EAAgBE,KAAI,SAAAd,GAAI,kCAC5BA,GAD4B,IAE/Be,KAAMF,EAAgBG,MAAK,SAAAD,GAAI,OAAIA,EAAKd,KAAOD,EAAKiB,gBALpB,2CAAH,qDCVhBC,G,MAPe,SAAC,GAAD,IAAGlB,EAAH,EAAGA,KAAH,OAC5B,6BACE,0BAAMmB,UAAU,kBAAhB,oBACCnB,EAAKe,KAAOf,EAAKe,KAAKK,KAAO,MCyCnBC,EAxCmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7BC,EAAWC,cAMjB,OACE,wBAAIL,UAAU,aACXG,EAASR,KAAI,SAAAd,GAAI,OAChB,wBAAImB,UACFnB,EAAKyB,UACD,2BACA,aAEJ,kBAAC,EAAD,CAAMzB,KAAMA,IACZ,6BACE,0BAAMmB,UAAU,mBAAhB,eAGCnB,EAAK0B,OAER,yBAAKP,UAAU,eACZnB,EAAKyB,UACF,OACA,SAEN,4BACErC,KAAK,SACL+B,UAAU,uBACVQ,QAAS,kBA3BS1B,EA2BgBD,EAAKC,QA1B/CsB,EHH0C,CAACnC,KAN3B,cAM8Cc,MGG1CD,IADK,IAACA,IAwBpB,gBCmEK2B,EArEH,WACV,IAAMrC,EAAUsC,YAAYxC,GACtBI,EAAQoC,YAAYrC,GACpBL,EAAW0C,YAAYnC,GACvB6B,EAAWC,cASXM,EAAeC,mBACnB,kBAlCoB,SAACtC,EAAgBN,GACvC,OAAQA,GACN,IAAK,QACH,OAAO,YAAIM,GAAOuC,MAAK,SAAC3B,EAAG4B,GAAJ,OAAU5B,EAAEqB,MAAMQ,cAAcD,EAAEP,UAE3D,IAAK,WACH,OAAO,YAAIjC,GAAOuC,MAAK,SAAC3B,EAAG4B,GACzB,OAAO5B,EAAEU,MAAQkB,EAAElB,KACfV,EAAEU,KAAKK,KAAKc,cAAcD,EAAElB,KAAKK,MACjC,KAGR,IAAK,KACH,OAAO,YAAI3B,GAAOuC,MAAK,SAAC3B,EAAG4B,GAAJ,OAAU5B,EAAEJ,GAAKgC,EAAEhC,MAE5C,QACE,OAAOR,GAkBH0C,CAAgB1C,EAAON,KAC7B,CAACA,EAAUM,IAGb,OACE,yBAAK0B,UAAU,OACb,mDAEkB,IAAjB1B,EAAM2C,OAEH,oCACE,4BACET,QApBY,WACtBJ,EJlC+B,CAAEnC,KANf,kBI0ClBgB,IACGK,MAAK,SAAAG,GAAe,OAAIW,EJpCF,SAAC9B,GAAD,MAAqB,CAAEL,KAN7B,iBAMmDK,SIoClC4C,CAAczB,QAiBxCxB,KAAK,SACL+B,UAAU,cAEV,uBAAGA,UAAW5B,EAAU,wBAA0B,KAEjDA,EAAU,UAAY,SAK3B,oCACE,4BACEH,KAAK,SACLuC,QAAS,kBAAMJ,EAASrC,EAAY,WACpCiC,UAAU,eAHZ,iBAQA,4BACE/B,KAAK,SACLuC,QAAS,kBAAMJ,EAASrC,EAAY,QACpCiC,UAAU,UAHZ,cAQA,4BACE/B,KAAK,SACLuC,QAAS,kBAAMJ,EAASrC,EAAY,cACpCiC,UAAU,UAHZ,gBAQA,kBAAC,EAAD,CAAUG,SAAUQ,OCzF1BQ,EAAO,kBACX,kBAAC,IAAD,CAAU1C,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKN2C,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.a0715d66.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { Todos } from '../api/api';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SET_SORT_TYPE = 'SET_SORT_TYPE';\nconst DELETE_TODO = 'DELETE_TODO';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (todos: Todos[]) => ({ type: FINISH_LOADING, todos });\nexport const setSortType = (sortType: string) => ({type: SET_SORT_TYPE, sortType});\nexport const deleteTodo = (value: number) => ({type: DELETE_TODO, value});\n\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getSortType = (state: RootState) => state.sortType;\n\n//Initial state\nexport type RootState = {\n  loading: boolean;\n  todos: Todos[],\n  sortType: string,\n};\n\nconst initialState: RootState = {\n  loading: false,\n  todos: [],\n  sortType:'',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n      }\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        todos: action.todos,\n      }\n\n    case SET_SORT_TYPE:\n      return {\n        ...state,\n        sortType: action.sortType,\n      }\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.value)\n      }\n\n    default:\n    return {\n      ...state\n    }\n  }\n}\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  initialState // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api/';\n\nexport interface Users {\n  id: number;\n  name: string;\n}\n\nexport interface Todos {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n  user?: Users;\n}\n\nconst getTodos = (): Promise<Todos[]> => {\n  return fetch(`${API_URL}/todos.json`)\n    .then(response => response.json())\n};\n\nconst getUsers = (): Promise<Users[]> => {\n  return fetch(`${API_URL}/users.json`)\n    .then(response => response.json())\n};\n\nexport const getTodosFromServer = async() => {\n  const [todosFromServer, usersFromServer] = await Promise.all([getTodos(), getUsers()]);\n\n  return todosFromServer.map(todo => ({\n  ...todo,\n  user: usersFromServer.find(user => user.id === todo.userId),\n}));\n\n}\n","import React from 'react';\n\nimport { Todos } from '../api/api';\n\ntype Props = {\n  todo: Todos;\n}\n\nconst User: React.FC<Props> = ({ todo }) => (\n  <div>\n    <span className=\"todo_user-text\">Users name: &nbsp;</span>\n    {todo.user ? todo.user.name : ''}\n  </div>\n);\n\nexport default User;\n","import React from 'react';\nimport User from './User';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteTodo } from '../store';\n\nimport { Todos } from '../api/api';\n\ntype Props = {\n  todoList: Todos[];\n}\n\nconst TodoList: React.FC<Props> = ({ todoList }) => {\n  const dispatch = useDispatch();\n\n  const deleteSelectedTodo = (id: number) => {\n    dispatch(deleteTodo(id))\n  }\n\n  return (\n    <ul className=\"todo_list\">\n      {todoList.map(todo => (\n        <li className={\n          todo.completed\n            ? 'todo_item todo_item-done'\n            : 'todo_item'\n        }>\n          <User todo={todo} />\n          <div>\n            <span className=\"todo_title-text\">\n              Todos: &nbsp;\n            </span>\n            {todo.title}\n          </div>\n          <div className=\"todo_status\">\n            {todo.completed\n              ? 'True'\n              : 'False'}\n          </div>\n          <button\n            type=\"button\"\n            className=\"button delete-button\"\n            onClick={() => deleteSelectedTodo(todo.id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default TodoList;\n","import React, { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodosFromServer, Todos } from './api/api';\n\n\nimport './App.scss';\nimport TodoList from './components/TodoList';\n\nimport {\n  isLoading,\n  startLoading,\n  finishLoading,\n  getTodos,\n  setSortType,\n  getSortType\n} from './store';\n\nconst getVisibleTodos = (todos: Todos[], sortType: string) => {\n  switch (sortType) {\n    case 'title':\n      return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n\n    case 'userName':\n      return [...todos].sort((a, b) => {\n        return a.user && b.user\n          ? a.user.name.localeCompare(b.user.name)\n          : 0;\n      });\n\n    case 'id':\n      return [...todos].sort((a, b) => a.id - b.id);\n\n    default:\n      return todos;\n  }\n}\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const todos = useSelector(getTodos)\n  const sortType = useSelector(getSortType);\n  const dispatch = useDispatch();\n\n  const handleLoadClick = () => {\n    dispatch(startLoading());\n\n    getTodosFromServer()\n      .then(todosFromServer => dispatch(finishLoading(todosFromServer)))\n  }\n\n  const visibleTodos = useMemo(\n    () => getVisibleTodos(todos, sortType),\n    [sortType, todos]\n  )\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n\n      {todos.length === 0\n        ? (\n          <>\n            <button\n              onClick={handleLoadClick}\n              type=\"button\"\n              className=\"buttonload\"\n            >\n              <i className={loading ? \"fa fa-spinner fa-spin\" : \"\"}>\n              </i>\n              {loading ? 'Loading' : 'Load'}\n            </button>\n          </>\n        )\n        : (\n          <>\n            <button\n              type=\"button\"\n              onClick={() => dispatch(setSortType('title'))}\n              className=\"button left\"\n            >\n              Sort by title\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => dispatch(setSortType('id'))}\n              className=\"button\"\n            >\n              Sort by id\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => dispatch(setSortType('userName'))}\n              className=\"button\"\n            >\n              Sort by user\n            </button>\n\n            <TodoList todoList={visibleTodos} />\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}